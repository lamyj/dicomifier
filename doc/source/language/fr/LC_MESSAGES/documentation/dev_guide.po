# 
msgid ""
msgstr ""
"Project-Id-Version: Dicomifier 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-26 11:34+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/documentation/dev_guide.rst:2
msgid "Developer Guide"
msgstr "Guide du d√©veloppeur"

#: ../../source/documentation/dev_guide.rst:5
msgid "API Dicomifier"
msgstr ""

#: ../../source/documentation/dev_guide.rst:7
msgid ""
"Dicomifier is primarily a library. A simple 'main' has been created to "
"generate a binary launcher."
msgstr ""

#: ../../source/documentation/dev_guide.rst:9
msgid ""
"If you want used it in your software, you should get the source code by "
"checking out source file (see :ref:`Installation Guide <Balise_Checkout>`)."
msgstr ""

#: ../../source/documentation/dev_guide.rst:13
msgid "Parsing Private Dictionary"
msgstr ""

#: ../../source/documentation/dev_guide.rst:15
msgid ""
"Dicomifier Library contains a singleton named Dictionaries and defined in "
"lib/dicom/Dictionaries.h. With it, you can add many private dictionary (each"
" dictionary should have an unique name)."
msgstr ""

#: ../../source/documentation/dev_guide.rst:18
msgid "Create and get the Dictionaries instance:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:24
msgid "Add a new dictionary:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:31
msgid ""
"By default, Dictionaries contains the DICOM public dictionary (named "
"'public')."
msgstr ""

#: ../../source/documentation/dev_guide.rst:33
msgid "Retrieve dictionary data:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:35
msgid ""
"GetTagFromName: Return the DcmTag of a given key name (and optional "
"dictionary name)"
msgstr ""

#: ../../source/documentation/dev_guide.rst:43
msgid ""
"GetTagFromKey: Return the DcmTag of a given key (and optional dictionary "
"name)"
msgstr ""

#: ../../source/documentation/dev_guide.rst:51
msgid "Retrieve number associated to private dictionary, for a given dataset:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:59
msgid "Parsing Bruker files"
msgstr ""

#: ../../source/documentation/dev_guide.rst:61
msgid "Todo"
msgstr ""

#: ../../source/documentation/dev_guide.rst:64
msgid "Parsing XML rule files"
msgstr ""

#: ../../source/documentation/dev_guide.rst:66
msgid ""
"Dicomifier Library contains two static functions to parse XML files and "
"generate a list of Rule objects."
msgstr ""

#: ../../source/documentation/dev_guide.rst:68
msgid "You should first include the header file:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:74
msgid "Parsing XML file:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:81
msgid "Parsing XML Node:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:91
msgid ""
"Comment: XML rule file or node should respect the rule syntax describe in "
"chapter :ref:`Format of rule XML files <Balise_RuleFormat>`."
msgstr ""

#: ../../source/documentation/dev_guide.rst:94
msgid "Adding new Actions"
msgstr ""

#: ../../source/documentation/dev_guide.rst:96
msgid ""
"You can add your owned actions in Dicomifier. To do this, you should create "
"2 classes (4 C++ files), for example: * MyAction.h * MyAction.cpp * "
"MyActionCreator.h * MyActionCreator.cpp"
msgstr ""

#: ../../source/documentation/dev_guide.rst:102
msgid ""
"Class MyAction do all your action job. Class MyActionCreator is just a "
"creator called by a factory which automatically creates an object 'MyAction'"
" when parsing an XML file."
msgstr ""

#: ../../source/documentation/dev_guide.rst:105
msgid "First, create header for MyAction class."
msgstr ""

#: ../../source/documentation/dev_guide.rst:107
msgid "Create a new class MyAction:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:125
#: ../../source/documentation/dev_guide.rst:180
#: ../../source/documentation/dev_guide.rst:268
#: ../../source/documentation/dev_guide.rst:323
msgid "Add constructor / desctructor"
msgstr ""

#: ../../source/documentation/dev_guide.rst:146
#: ../../source/documentation/dev_guide.rst:201
#: ../../source/documentation/dev_guide.rst:289
#: ../../source/documentation/dev_guide.rst:344
msgid "Overload virtual pure functions:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:158
msgid ""
"Now you can implement MyAction class. The 'run' function is the main "
"function called when Dicomifier is execute."
msgstr ""

#: ../../source/documentation/dev_guide.rst:160
msgid "Then create header file for MyActionCreator class:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:162
msgid "Create a new class MyActionCreator:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:213
#: ../../source/documentation/dev_guide.rst:356
msgid "Add a name to your class, this name is use by the factory:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:225
msgid ""
"Now you can implement MyActionCreator class. The 'Create' function is the "
"main function, automatically called when Dicomifier parse XML input file."
msgstr ""

#: ../../source/documentation/dev_guide.rst:234
msgid "Now you can compile your project and try running the new Action."
msgstr ""

#: ../../source/documentation/dev_guide.rst:237
msgid "Adding new Conditions"
msgstr ""

#: ../../source/documentation/dev_guide.rst:239
msgid ""
"You can add your owned conditions in Dicomifier. To do this, you should "
"create 2 classes (4 C++ files), for example: * MyCondition.h * "
"MyCondition.cpp * MyConditionCreator.h * MyConditionCreator.cpp"
msgstr ""

#: ../../source/documentation/dev_guide.rst:245
msgid ""
"Class MyCondition do all your condition job and return a boolean. Class "
"MyConditionCreator is just a creator called by a factory which automatically"
" creates an object 'MyCondition' when parsing an XML file."
msgstr ""

#: ../../source/documentation/dev_guide.rst:248
msgid "First, create header for MyCondition class."
msgstr ""

#: ../../source/documentation/dev_guide.rst:250
msgid "Create a new class MyCondition:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:301
msgid ""
"Now you can implement MyCondition class. The 'eval' function is the main "
"function called when Dicomifier is execute."
msgstr ""

#: ../../source/documentation/dev_guide.rst:303
msgid "Then create header file for MyConditionCreator class:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:305
msgid "Create a new class MyConditionCreator:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:368
msgid ""
"Now you can implement MyConditionCreator class. The 'Create' function is the"
" main function, automatically called when Dicomifier parse XML input file."
msgstr ""

#: ../../source/documentation/dev_guide.rst:377
msgid "Now you can compile your project and try running the new Condition."
msgstr ""

#: ../../source/documentation/dev_guide.rst:380
msgid "Dicomifier Exception"
msgstr ""

#: ../../source/documentation/dev_guide.rst:382
msgid ""
"There is a class to raise and catch exception in Dicomifier: "
"DicomifierException. This base class inherit from std::exception class."
msgstr ""

#: ../../source/documentation/dev_guide.rst:385
msgid "To raise an exception use the base constructor:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:391
msgid "To catch and display error message:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:404
msgid ""
"You can inherit from this base class to manage exception in your software. "
"Simply create your exception.h:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:417
msgid "Python Wrapper"
msgstr ""

#: ../../source/documentation/dev_guide.rst:419
msgid ""
"A Python Wrapper has been created and works like the binary launcher. To use"
" Dicomifier in your Python Code:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:422
msgid "Include python file dicomifier.py"
msgstr ""

#: ../../source/documentation/dev_guide.rst:428
msgid "Call function execute"
msgstr ""

#: ../../source/documentation/dev_guide.rst:435
msgid ""
"Only the DicomifierException class is wrapped. You can catch Dicomifier "
"Exception."
msgstr ""

#: ../../source/documentation/dev_guide.rst:445
msgid "Generate Documentation"
msgstr ""

#: ../../source/documentation/dev_guide.rst:447
msgid "Documentation is generated by Sphinx (See http://sphinx-doc.org/)."
msgstr ""

#: ../../source/documentation/dev_guide.rst:449
msgid ""
"After checking out the source code, you can find a repository "
"'dicomifier/doc/'. It contains this documentation."
msgstr ""

#: ../../source/documentation/dev_guide.rst:452
msgid "You can add your owned pages or add a new language."
msgstr ""

#: ../../source/documentation/dev_guide.rst:455
msgid "Build the documentation"
msgstr ""

#: ../../source/documentation/dev_guide.rst:457
msgid "Go to the directory 'dicomifier/doc':"
msgstr ""

#: ../../source/documentation/dev_guide.rst:463
msgid "Create a map with all documentation texts:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:469
msgid ""
"As a result, many pot files are generated under _build/locale directory."
msgstr ""

#: ../../source/documentation/dev_guide.rst:471
msgid "Defined what languages you want for the documentation:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:477
msgid "Now you are creating documentation in English and French."
msgstr ""

#: ../../source/documentation/dev_guide.rst:479
msgid "Go to 'source' directory:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:485
msgid "Generate the translation files:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:491
msgid "You got these directories that contain po files:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:493
msgid "./language/en/LC_MESSAGES/"
msgstr ""

#: ../../source/documentation/dev_guide.rst:494
msgid "./language/fr/LC_MESSAGES/"
msgstr ""

#: ../../source/documentation/dev_guide.rst:496
msgid "Translate your po files."
msgstr ""

#: ../../source/documentation/dev_guide.rst:498
msgid "Compile translation files:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:504
msgid "Return to previous directory ('doc'):"
msgstr ""

#: ../../source/documentation/dev_guide.rst:510
msgid "Generate the documentation in french:"
msgstr ""

#: ../../source/documentation/dev_guide.rst:516
msgid ""
"Done. Documentation is now available under build/html directory. Open the "
"html main page 'index.html' with a web browser (like Google Chrome)."
msgstr ""

#~ msgid "TODO"
#~ msgstr ""
